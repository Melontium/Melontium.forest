<?php

/**
 * @file
 * farmOS forest management module.
 */

include_once 'farm_forest.features.inc';

/**
 * Implements hook_help().
 */
function farm_forest_help($path, $arg) {

  // Add help text to the forest plan list page.
  if ($path == 'farm/plans/forest') {
    $help = '<p>' . t("This page lists all forest plans. Select one from the list below to view it, or click \"Add forest plan\" to create a new one.") . '</p>';
    $help .= '<p>' . t("Plans can be archived for future reference. To view archived plans, use the \"Filter/sort\" options in the list below.") . '</p>';
    return $help;
  }

  // If the path starts with 'farm/plan/%', then load the plan and see if it is
  // a forest plan. If not, bail. Otherwise continue.
  if (strpos($path, 'farm/plan/%') === 0) {
    $plan = farm_plan_load($arg[2]);
    if (empty($plan) || $plan->type != 'forest') {
      return '';
    }
  }

  // Add help text to all farm/plan/% paths.
  switch ($path) {

    // Plan add/edit form.
    case 'farm/plan/add/forest':
    case 'farm/plan/%/edit':
      $help = '<p>' . t('Use the form below to configure the settings for this forest plan.') . '</p>';
      return $help;

    // Plan view page.
    case 'farm/plan/%':
    case 'farm/plan/%/view':
      $help = '<p>' . t('This page summarizes the details of this forest plan. Select one of the tabs to customize the plan.') . '</p>';
      $help .= '<p>' . t('To edit the plan, click the "Settings" tab.') . '</p>';
      return $help;

    // Area selection form.
    case 'farm/plan/%/area':
      $help = '<p>' . t('Select the area(s) that will be part of this plan. If they do not exist yet, start by <a href="!add_area">creating a new area</a>.', array('!add_area' => url('admin/structure/taxonomy/farm_areas/add', array('query' => array('destination' => current_path()))))) . '</p>';
      return $help;

    // Planting form.
    case 'farm/plan/%/planting':
      $help = '<p>' . t('Add planting(s) to this forest plan.') . '</p>';
      return $help;

    // Management form.
    case 'farm/plan/%/management':
      $help = '<p>' . t('Add forest management tasks to the plan.') . '</p>';
      return $help;
  }
}

/**
 * Implements hook_farm_ui_entities().
 */
function farm_forest_farm_ui_entities() {
  return array(
    'farm_plan' => array(
      'forest' => array(
        'label' => t('Forest Plan'),
        'label_plural' => t('Forest Plans'),
        'view' => 'farm_forest_plan',
      ),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function farm_forest_menu() {

  // Area selection form.
  $items['farm/plan/%farm_plan/area'] = array(
    'title' => 'Area',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_forest_plan_area_form', 2),
    'access callback' => 'farm_forest_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_forest.plan.area.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  // Planting form.
  $items['farm/plan/%farm_plan/planting'] = array(
    'title' => 'Planting',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_forest_plan_planting_form', 2),
    'access callback' => 'farm_forest_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_forest.plan.planting.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );

  // Management form.
  $items['farm/plan/%farm_plan/management'] = array(
    'title' => 'Management',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_forest_plan_management_form', 2),
    'access callback' => 'farm_forest_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_forest.plan.management.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );

  return $items;
}

/**
 * Access callback for forest plan tabs.
 */
function farm_forest_plan_access($plan) {

  // If the plan is not a forest plan, deny access.
  if ($plan->type != 'forest') {
    return FALSE;
  }

  // Defer to the farm plan access callback.
  return farm_plan_access('update', $plan);
}

/**
 * Implements hook_page_build().
 */
function farm_forest_page_build(&$page) {

  // Get the current path.
  $path = current_path();

  // Break it up into parts.
  $path_parts = explode('/', $path);

  // If this is not a plan area selection path, bail.
  if (count($path_parts) < 4 || !($path_parts[0] == 'farm' && $path_parts[1] == 'plan' && $path_parts[3] == 'area' && empty($path_parts[4]))) {
    return;
  }

  // Attempt to load the plan. Bail if unsuccessful.
  $plan = menu_get_object('farm_plan', 2);
  if (empty($plan)) {
    return;
  }

  // If the plan is not a forest plan, bail.
  if ($plan->type !== 'forest') {
    return;
  }

  // Build the areas map and add it to the page content.
  $page['content']['farm_areas'] = farm_map_build('farm_areas');

  // Set the weight to 100 so that it appears on bottom.
  $page['content']['farm_areas']['#weight'] = 100;

  // Set the content region #sorted flag to FALSE so that it resorts.
  $page['content']['#sorted'] = FALSE;

  // Add area selection javascript.
  drupal_add_js(drupal_get_path('module', 'farm_forest') . '/js/farm_forest_plan_area.js');
}
